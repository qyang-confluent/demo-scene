SET 'auto.offset.reset'='earliest';

CREATE STREAM CLAIMS_STREAM
(
    CLAIM_ID INTEGER,
    RESOURCE_TYPE STRING,
    STATUS STRING,
    TYPE STRING,
    USE STRING,
    PATIENT_ID STRING,
    INSURER STRING,
    PROVIDER STRING,
    PRIORITY STRING,
    PAYEE STRING,
    DIAGNOSIS STRING,
    INSURANCE STRUCT<FOCAL STRING, COVERAGE INTEGER>,
    ITEM STRUCT
        <SEQUENCE INTEGER,
        PRODUCTORSERVICE STRING,
        SERVICEDATE STRING,
        UNITPRICE STRUCT
            <VALUE DOUBLE,
            CURRENCY STRING>,
        NET STRUCT
            <VALUE DOUBLE,
            CURRENCY STRING>
        >
)
WITH (
    KAFKA_TOPIC = 'CLAIMS_STREAM',
    VALUE_FORMAT = 'JSON'
);

--SELECT ITEM->UNITPRICE->VALUE FROM CLAIMS_STREAM EMIT CHANGES;

CREATE STREAM PATIENTS_STREAM
(
    PATIENT_ID STRING,
    FIRST_NAME STRING,
    LAST_NAME STRING,
    EMAIL STRING,
    GENDER STRING,
    STREET_ADDRESS STRING,
    CITY STRING,
    STATE STRING
)
WITH (
    KAFKA_TOPIC = 'PATIENTS_STREAM',
    VALUE_FORMAT = 'JSON'
);

CREATE STREAM CLAIMS_STREAM_KEY
WITH (
    KAFKA_TOPIC = 'CLAIMS_STREAM_KEY',
    VALUE_FORMAT = 'AVRO'
) AS
SELECT
    CLAIM_ID,
    RESOURCE_TYPE,
    STATUS,
    TYPE,
    USE,
    PATIENT_ID,
    INSURER,
    PROVIDER,
    PRIORITY,
    PAYEE,
    DIAGNOSIS,
    INSURANCE,
    ITEM
FROM CLAIMS_STREAM
PARTITION BY PATIENT_ID
EMIT CHANGES;

CREATE STREAM PATIENTS_STREAM_KEY
WITH (
    KAFKA_TOPIC = 'PATIENTS_STREAM_KEY',
    VALUE_FORMAT = 'AVRO'
) AS
SELECT
    PATIENT_ID,
    FIRST_NAME,
    LAST_NAME,
    EMAIL,
    GENDER,
    STREET_ADDRESS,
    CITY,
    STATE
FROM PATIENTS_STREAM
PARTITION BY PATIENT_ID
EMIT CHANGES;

CREATE TABLE PATIENTS_TABLE
(
    PATIENT_ID STRING PRIMARY KEY,
    FIRST_NAME STRING,
    LAST_NAME STRING,
    EMAIL STRING,
    GENDER STRING,
    STREET_ADDRESS STRING,
    CITY STRING,
    STATE STRING
)
WITH (
    KAFKA_TOPIC = 'PATIENTS_STREAM_KEY',
    VALUE_FORMAT = 'AVRO'
);

CREATE TABLE PATIENTS_TABLE_LOOKUP
AS
SELECT
    PATIENT_ID,
    LATEST_BY_OFFSET(FIRST_NAME) AS FIRST_NAME_LATEST,
    LATEST_BY_OFFSET(LAST_NAME) AS LAST_NAME_LATEST,
    LATEST_BY_OFFSET(EMAIL) AS EMAIL_LATEST,
    LATEST_BY_OFFSET(GENDER) AS GENDER_LATEST,
    LATEST_BY_OFFSET(STREET_ADDRESS) AS STREET_ADDRESS_LATEST,
    LATEST_BY_OFFSET(CITY) AS CITY_LATEST,
    LATEST_BY_OFFSET(STATE) AS STATE_LATEST
FROM PATIENTS_STREAM_KEY
GROUP BY PATIENT_ID;

CREATE STREAM PATIENT_CLAIMS_STREAM
WITH (
    KAFKA_TOPIC = 'PATIENT_CLAIMS_STREAM',
    VALUE_FORMAT = 'AVRO'
) AS
SELECT
    cs.PATIENT_ID AS PATIENT_ID,
    cs.CLAIM_ID,
    cs.ITEM->NET->VALUE AS CLAIM_NET_VALUE,
    pt.EMAIL
FROM CLAIMS_STREAM_KEY cs
LEFT OUTER JOIN PATIENTS_TABLE pt
ON cs.PATIENT_ID = pt.PATIENT_ID;

CREATE TABLE PATIENT_CLAIMS_LOOKUP
WITH (
    KAFKA_TOPIC = 'PATIENT_CLAIMS_LOOKUP',
    VALUE_FORMAT = 'AVRO'
) AS
SELECT
    PATIENT_ID,
    LATEST_BY_OFFSET(EMAIL) AS EMAIL_LATEST,
    COUNT(CLAIM_ID) AS CLAIM_COUNT_TOTAL,
    ROUND(SUM(CLAIM_NET_VALUE), 2) AS CLAIM_NET_TOTAL,
    LATEST_BY_OFFSET(CLAIM_ID) AS LATEST_CLAIM,
    COLLECT_SET(CLAIM_ID) AS CLAIM_HISTORY
FROM PATIENT_CLAIMS_STREAM
GROUP BY PATIENT_ID;

-- SELECT * FROM PATIENT_CLAIMS_STREAM EMIT CHANGES;
-- SELECT * FROM PATIENT_CLAIMS_LOOKUP WHERE CLAIM_COUNT_TOTAL > 1 EMIT CHANGES;
-- SELECT * FROM PATIENT_CLAIMS_LOOKUP WHERE PATIENT_ID = '45';
